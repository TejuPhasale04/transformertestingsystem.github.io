<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
  <title>Manage User</title>
</head>
<body style="color:white; background-color:black">
    <div class="container">
      <div class="text-center">
        <h1 class="display-5 mb-5"><strong> Manage User</strong> </h1>
      </div>
      <div class="main row justify-content-center"></div>
      <form id="SignupForm" class="row justify-content-center mb-4" >
        <div class="col-10 mb-3">
            <label for="Name">Enter Name:</label>
            <input class="form-control" id="name" type="text">
        </div>
        <div class="col-10  mb-3">
          <label for="email">Enter Email:</label>
          <input class="form-control" id="email"type="email">
        </div>
        <div class="col-10  mb-3">
          <label for="password">Enter Password:</label>
          <input class="form-control" id="password" type="password">
        </div>  
        <br>        
        <div class="col-10">
          <input class="btn btn-success add-btn" type="submit" value="Submit" id="btn">
        </div>
      </form>
      <div class="col-10 mb-5">
          <table class="table table-striped table-dark">
            <thead>
              <tr>
                <th>Name:</th>
                <th>Email:</th>
                <th>Password:</th>
                <th>Create Admin</th>
                <th>Action:</th>
              </tr>
            </thead>
            <tbody id="student-list">
             <tbody id="student-list">
              {{#each users}}
              <tr>
                <td>{{this.name}}</td>
                <td>{{this.email}}</td>
                <td>{{this.password}}</td>
                <td>{{this.role}}</td>
                <td>
                  <a class="btn btn-warning btn-sm edit" data-id="{{this._id}}">Edit</a>
                  <a class="btn btn-danger btn-sm delete" data-id="{{this._id}}">Delete</a>
                </td>
              </tr>
              {{/each}}
            </tbody>
            </tbody>
          </table>
      </div>
    </div>
 <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>         
   <script>

     document.querySelector("#SignupForm").addEventListener("submit", async (e)=>{
      e.preventDefault();
      const name=document.querySelector("#name").value;
      const email=document.querySelector("#email").value;
      const password=document.querySelector("#password").value; 
         let resp = await axios.post('/ManageUser', { name, email, password })
          .then(response => {
                  alert(response.data);
            })
            .catch(error => {
            alert(error.response.data);
            });
        });
        // Handle delete button click event
document.querySelector("#student-list").addEventListener("click", async (e) => {
  e.preventDefault();
  if (e.target.classList.contains("delete")) {
    const userId = e.target.getAttribute("data-id");
    try {
      // Send DELETE request to server with user ID
      const resp = await axios.delete(`/ManageUser/${userId}`);
      alert(resp.data);
      // Reload the page to show updated user list
      window.location.reload();
    } catch (error) {
      console.error(error);
      alert("Failed to delete user");
    }
  } else if (e.target.classList.contains("edit")) {
    const userId = e.target.getAttribute("data-id");
    try {
      // Get user data from server using user ID
      const resp = await axios.get(`/ManageUser/${userId}`);
      const userData = resp.data;
      // Fill the form with the user data
      document.querySelector("#name").value = userData.name;
      document.querySelector("#email").value = userData.email;
      document.querySelector("#password").value = userData.password;
      // Change the form action to PUT request and add user ID as parameter
      document.querySelector("#SignupForm").setAttribute("method", "PUT");
      document.querySelector("#SignupForm").setAttribute("action", `/ManageUser/${userId}`);
      // Change the submit button text to "Update"
      document.querySelector("#btn").value = "Update";
    } catch (error) {
      console.error(error);
      alert("Failed to get user data");
    }
  }
});

// Handle submit button click event for update form
document.querySelector("#SignupForm").addEventListener("submit", async (e) => {
  e.preventDefault();
  const name = document.querySelector("#name").value;
  const email = document.querySelector("#email").value;
  const password = document.querySelector("#password").value;
  const userId = e.target.getAttribute("action").split("/").pop();
  try {
    // Send PUT request to server with user ID and updated data
    const resp = await axios.put(`/ManageUser/${userId}`, { name, email, password });
    alert(resp.data);
    // Reload the page to show updated user list
    window.location.reload();
  } catch (error) {
    console.error(error);
    alert("Failed to update user");
  }
});
</script>
<script>
  // Handle delete button click
  const deleteButtons = document.querySelectorAll(".delete");
  deleteButtons.forEach(button => {
    button.addEventListener("click", async () => {
      const id = button.getAttribute("data-id");
      const resp = await axios.delete(`/ManageUser/${id}`);
      alert(resp.data);
      location.reload();
    });
  });

  // Handle edit button click
  const editButtons = document.querySelectorAll(".edit");
  editButtons.forEach(button => {
    button.addEventListener("click", async () => {
      const id = button.getAttribute("data-id");
      const name = prompt("Enter new name:");
      const email = prompt("Enter new email:");
      const password = prompt("Enter new password:");
      const role = prompt("Enter new role:");
      const resp = await axios.put(`/ManageUser/${id}`, { name, email, password, role });
      alert(resp.data);
      location.reload();
    });
  });
</script>
  
</body>
</html>
